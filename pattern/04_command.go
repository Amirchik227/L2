package main

import "fmt"

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
	Паттерн "Команда" (Command) — это поведенческий паттерн проектирования, который инкапсулирует запрос в виде объекта, делая возможной параметризацию клиентских объектов с другими запросами, организацию очереди запросов, а также поддержку отмены операций.

	Применимость:
	1) Когда вы хотите параметризовать объекты с операциями.
	2) Когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети.
	3) Когда вам нужна операция отмены.

	Плюсы:
	1) Отделение отправителя от получателя: Позволяет отделить объект, инициирующий операцию (отправитель), от объекта, который фактически выполняет операцию (получатель).
	2) Поддержка отмены и повтора операций: Позволяет легко добавлять функциональность отмены и повтора операций.
	3) Гибкость в добавлении новых команд: Позволяет легко добавлять новые команды без изменения существующего кода.

	Минусы:
	1) Увеличение числа классов: Внедрение команд может привести к увеличению числа классов в системе, что может усложнить структуру кода.
	2) Возможное усложнение отладки: Команды могут стать сложными, если требуется передавать большое количество параметров.
*/

// Интерфейс девайса, который можно включить и выключить (Reciever interface)
type Device interface {
	on()
	off()
}

// Интерфейс команд (Command interface)
type Command interface {
	execute()
}

// Кнопка (Invoker), при нажатии на которую выполняется некоторая команда
type Button struct {
	command Command
}

func (b *Button) press() {
	b.command.execute()
}

// Команда выключения девайса
type OnCommand struct {
	device Device
}

func (c *OnCommand) execute() {
	c.device.on()
}

// Команда включения девайса
type OffCommand struct {
	device Device
}

func (c *OffCommand) execute() {
	c.device.off()
}

// Reciever (конкретным получаетелем является телевизор)
type Tv struct {
	isRunning bool
}

func (t *Tv) on() {
	t.isRunning = true
	fmt.Println("Телевизор включен")
}

func (t *Tv) off() {
	t.isRunning = false
	fmt.Println("Телевизор выключен")
}

// func main() {

// 	tv := &Tv{} // Создаем телевизор

// 	// Связываем команду включения с телевизором
// 	onCommand := &OnCommand{
// 		device: tv,
// 	}

// 	// Связываем команду выключения с телевизором
// 	offCommand := &OffCommand{
// 		device: tv,
// 	}

// 	// Связываем кнопку ВКЛ с соответсвующей командой
// 	onButton := &Button{
// 		command: onCommand,
// 	}
// 	onButton.press() // Проверяем работу кнопки

// 	// Связываем кнопку ВЫКЛ с соответсвующей командой
// 	offButton := &Button{
// 		command: offCommand,
// 	}
// 	offButton.press() // Проверяем работу кнопки
// }
