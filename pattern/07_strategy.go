package main

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern

	Паттерн "Стратегия" (Strategy) — это поведенческий паттерн проектирования, который определяет семейство алгоритмов, инкапсулирует каждый из них и делает их взаимозаменяемыми. Он позволяет изменять алгоритмы независимо от клиентов, которые их используют.

	Применимость:
	1) Когда есть несколько вариантов решения задачи, и нужно предоставить возможность выбора одного из них во время выполнения программы.
	2) Когда необходимо предоставить различные варианты поведения объекта и позволить клиентам выбирать нужный вариант.

	Плюсы:
	1) Инкапсуляция алгоритмов: Каждая стратегия инкапсулирует свой собственный алгоритм, что упрощает поддержку и изменение кода.
	2) Объектно-ориентированный подход: Позволяет создавать иерархии стратегий и обеспечивает гибкость при добавлении новых стратегий.
	3) Избегание условных операторов: Помогает избежать больших блоков условного кода, основанного на различных вариантах поведения.

	Минусы:
	1) Увеличение числа классов: Внедрение стратегий может привести к увеличению числа классов в системе, что может усложнить её структуру.
	2) Сложность выбора стратегии: Клиент должен знать о существовании различных стратегий и самостоятельно выбирать подходящую.
*/

import "fmt"

// Интерфейс стратегии оплаты
type PaymentStrategy interface {
	Pay(amount float64) string
}

// Стратегия оплаты кредитной картой
type CreditCardPayment struct{}

func (c *CreditCardPayment) Pay(amount float64) string {
	return fmt.Sprintf("Произведена оплата по кредитной карте в размере %.2f₽", amount)
}

// Стратегия оплаты через PayPal
type PayPalPayment struct{}

func (p *PayPalPayment) Pay(amount float64) string {
	return fmt.Sprintf("Произведена оплата по PayPal в размере %.2f₽", amount)
}

// Контекст, использующий стратегию
type Payment struct {
	PaymentMethod PaymentStrategy
}

func (p *Payment) Process(amount float64) string {
	return p.PaymentMethod.Pay(amount)
}

func (p *Payment) setPaymentStrategy(ps PaymentStrategy) {
	p.PaymentMethod = ps
}

// func main() {
// 	// Создаем контекст со стратегией оплаты по кредитной карте
// 	payment := &Payment{PaymentMethod: &CreditCardPayment{}}

// 	// Выполняем платеж
// 	result := payment.Process(3112.75)
// 	fmt.Println(result)

// 	// Меняем стратегию на PayPal
// 	payment.setPaymentStrategy(&PayPalPayment{})

// 	// Выполняем платеж через новую стратегию
// 	result = payment.Process(99.9)
// 	fmt.Println(result)
// }
